---
- name: Configuration des serveurs SPRIN
  hosts: sprin
  tasks:
    - name: Installer les packages nécessaires
      apt:
        name: ["git", "rsync", "nfs-common", "ca-certificates", "curl", "cifs-utils"]
        state: present
      become: yes

    - name: Supprimez le répertoire existant
      file:
        path: '/home/mysonet/sprin'
        state: absent

    - name: Créer un dossier
      file:
        path: "/home/mysonet/mysonet-mysql"
        state: directory

    - name: Cloner le dépôt Git
      git:
        repo: 'https://github.com/CebrailDevOps/sprin.git'
        dest: '/home/mysonet/sprin'
        update: yes

    - name: Supprimer le dossier cible
      file:
        path: "/home/mysonet/sprin/mysonet-mysql"
        state: absent

    - name: Supprimer les dossiers cibles s'ils existent
      file:
        path: "/home/mysonet/{{ item }}"
        state: absent
      loop:
        - mysonet-data
        - scripts
        - sshkey
      become: yes

    - name: Déplacer les fichiers clonés
      shell: mv /home/mysonet/sprin/* /home/mysonet/

    - name: Installer Docker
      shell: curl -sSL https://get.docker.com | sh
      become: yes

    - name: Ajouter l'utilisateur mysonet au groupe docker
      user:
        name: mysonet
        groups: docker
        append: yes
      become: yes

    - name: Installer Docker-compose
      apt:
        name: docker-compose
        state: present
      become: yes

    - name: Redémarrer le serveur
      ansible.builtin.reboot:
      become: yes

    - name: Attendre que MySQL soit prêt
      command: sleep 30

    - name: Construire l'image Docker
      docker_image:
        path: /home/mysonet
        name: cebraildevops/mysonet-php
        tag: 1.0
        source: build

    - name: Démonter un système de fichiers spécifique
      mount:
        path: /home/mysonet/mysonet-mysql
        state: unmounted
      become: yes

    - name: Arrêter les conteneurs
      shell: docker compose down

    - name: Get Docker Info
      command: docker info
      register: docker_info
      changed_when: false

    - name: Lancer Docker Compose
      docker_compose:
        project_src: /home/mysonet
        state: present
      when: "'Swarm: inactive' in docker_info.stdout"

    - name: Arrêter les conteneurs
      shell: docker compose down

    - name: Supprimer le répertoire /home/mysonet/mysonet-mysql et son contenu
      file:
        path: /home/mysonet/mysonet-mysql
        state: absent
      become: yes

    - name: Recréer le répertoire /home/mysonet/mysonet-mysql
      file:
        path: /home/mysonet/mysonet-mysql
        state: directory

    - name: Désactiver Docker au démarrage
      service:
        name: docker
        enabled: no
      become: yes

    - name: Copier la clé SSH
      slurp:
        src: /home/mysonet/.ssh/id_rsa.pub
      register: public_key

    - name: Coller la clé SSH
      authorized_key:
        user: mysonet
        key: "{{ public_key['content'] | b64decode }}"
      delegate_to: "{{ hostvars['nfs1']['ansible_host'] }}"
      become: yes

    - name: Changer les permissions et propriétés
      file:
        path: "/home/mysonet/mysonet-mysql"
        state: directory
        mode: '0777'
        owner: 999
        group: 999
      become: yes

    - name: Changer les permissions pour les scripts
      file:
        path: "/home/mysonet/scripts"
        mode: 'a+x'
        recurse: yes
      become: yes

    - name: Ajouter un montage NFS dans /etc/fstab
      lineinfile:
        path: /etc/fstab
        line: "{{ hostvars['nfs1']['ansible_host'] }}:/home/mysonet/mysonet-mysql /home/mysonet/mysonet-mysql nfs _netdev,auto 0 0"
        state: present
      become: yes

    - name: Ajouter des tâches au crontab
      cron:
        name: "{{ item.name }}"
        job: "{{ item.job }}"
        special_time: reboot
      loop:
        - name: "Copy files on reboot"
          job: "sleep 25 && /home/mysonet/scripts/copyfiles.sh"
        - name: "Mount on reboot"
          job: "sleep 30 && mount -a"
        - name: "Start docker on reboot"
          job: "sleep 35 && systemctl start docker"
      become: yes

    - name: Ajouter des tâches au crontab
      cron:
        name: "Relance des demandes"
        job: "/bin/bash /home/mysonet/scripts/relance_demandes.sh"
        minute: "*/15"
      become: yes

    - name: Redémarrer le serveur
      ansible.builtin.reboot:
      become: yes

    - name: Attendre que MySQL soit prêt
      command: sleep 30

- name: Initialize Docker Swarm
  hosts: sprin1
  tasks:
    - name: Get Docker Info
      command: docker info
      register: docker_info
      changed_when: false

    - name: Initialize Swarm
      command: docker swarm init --advertise-addr {{ hostvars['sprin1']['ansible_host'] }}
      register: swarm_init
      when: "'Swarm: inactive' in docker_info.stdout"
      changed_when: "'This node joined a swarm as a manager' in swarm_init.stdout or 'Swarm initialized' in swarm_init.stdout"

    - name: Retrieve Swarm Worker Token
      command: docker swarm join-token worker -q
      register: worker_token
      delegate_to: sprin1
      run_once: true

- name: Join nodes to Docker Swarm
  hosts: sprin2:sprin3
  tasks:
    - name: Get Docker Info
      command: docker info
      register: docker_info
      changed_when: false

    - name: Join Swarm
      command: docker swarm join --token {{ hostvars['sprin1'].worker_token.stdout }} {{ hostvars['sprin1']['ansible_host'] }}:2377
      register: join_result
      changed_when: "'This node joined a swarm as a worker' in join_result.stdout"
      when: "'Swarm: inactive' in docker_info.stdout"

- name: Deploy Docker Stack
  hosts: sprin1
  tasks:
    - name: Get Docker Info
      command: docker info
      register: docker_info
      changed_when: false

    - name: Deploy Stack
      command: docker stack deploy -c docker-compose.yml mysonet
      when: "'Swarm: inactive' in docker_info.stdout"
